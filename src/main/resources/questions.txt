Q001:Why are comments used in the source code?
A001:Comments are used to document and describe the meaning and purpose of lines of code directly on the spot.
Q002:Describe the three comment types in Java. How do you recognize them and what are they used for?
A002:Single line comments: They are introduced with double slashes and are valid until the end of a line. They are used for short descriptions.
Bracketed or Multi line comments: They are introduced with a slash and a star and are valid until the end marker (i.e., a star followed by a slash). They can extend over several lines. They are used for detailed explanations.
Javadoc comments: They are used like bracketed comments but introduced with a slash and two stars. They also extend over several lines and are useful for detailed documentation of source code. Javadoc comments are used by the external Javadoc program to generate technical documentation as HTML pages. Javadoc tags are available for the documentation. They can be used to identify explicit information such as the meaning of the parameters and the return value of a method.
Q003:How does one give the short description of a method in Javadoc comments as well as describe the method parameters and return value?
A003:The short description of a method consists of the first sentence of the Javadoc comment. Method parameters are described by the Javadoc tag @param; the return value by @return.
Q004:Describe the purpose of Java annotations.
A004:Java annotations are metadata available to the compiler and at the runtime of the program. They can be used to make certain statements about the code which can then be checked automatically by the compiler.
Q005:What are code conventions and why were they developed?
A005:Code conventions are agreements on how code is structured, named, and formatted. They were developed since many people often work together on a system and therefore need to understand one another's code.
Q006:How do code conventions affect the maintainability of software?
A006:These conventions are intended to help one read source code more efficiently. Code that can be read quickly can also be better understood, maintained and adapted.
Q007:Name and explain the general advantages of the central definition of console output for objects.
A007:Since the definition is only made once and centrally, less programming effort is required. Additionally, in contrast to multiple, decentralized definitions of console output, it is less likely that any attribute will be forgotten during output.
Q008:Which method should be overwritten to generate a string description for an object in the Java programming language?
A008:The class Object, from which all Java classes implicitly inherit, offers the method toString() for this purpose.
Q009:Why do all objects in Java have a toString() method even when they do have an inheritance relationship or implement an interface?
A009:The toString() method is defined in the general superclass Object.
Q010:How are primitive data types stored? How are complex data types stored?
A010:Primitive data types are stored in main memory as numbers, floating-point numbers, letters, or truth values. Complex data types are stored as a reference that refers to an object.
Q011:What effects do the differences between reference and primitive data types have on the comparison of data types?
A011:Primitive data types are compared with each other without any problems when using the == operator. Reference types, on the other hand, are only compared with each other using the reference. The system therefore checks whether they are the same objects. Identical objects cannot be compared in this way.
Q012:What possibility does Java offer to compare the content of complex data types?
A012:In Java, the equals() method of the class Object can be overridden to compare the contents of objects.
Q013:What is the usual procedure for a comparing content with the equals() method?
A013:1.	Check that it is the same reference.
2.	Check that the objects are of the same type.
3.	If yes, convert type and compare.
4.	If no, call equals() method of the superclass.
Q014:In which cases is the hashCode() method used?
A014:The comparison with equals() is too slow for large classes with many attributes relevant for the comparison. In order to achieve similar fast processing as when comparing references, the comparison is performed using a hash code that depends on the content which can be generated with the method hashCode(). Apart from this, the hashCode() method is required by data structures that use hashing.
Q015:What is hashing?
A015:Hashing is the generation of a key for a given object that is as unique as possible.
Q016:How can hash codes of strings be formed?
A016:Each letter can be multiplied by a prime number which is always raised to a different power. The sum of these products results in the hash code.
Q017:What are the requirements for a hashCode() method?
A017:The method must be stable and match the equals() method. In addition, the generated hash codes must be as unique or widely spread as possible and only attributes that have to do with the identity of the object should be included in the calculation.
Q018:What does “call by value” mean and how is it different from “call by reference”?
A018:If primitive data types are used as parameters when a method is called in Java, a copy of the value is passed. This is referred to as “call by value.” Changes to the passed values only have local effects within the method. If, on the other hand, an object is expected, the reference to the object is passed and not a copy of the object (this is called a “call by reference”).
Q019:What side effects can occur with “call by reference”?
A019:“Call by reference” means that the calling program and the called method work with the same object. The changes to the object within the method therefore also affect the calling program.
Q020:What steps are required to use externally developed libraries in your own project?
A020:The libraries must first be purchased or downloaded. They must then be added to the Java classpath so that they can be found by the compiler.
Q021:Which keyword is used in Java to make the classes of such libraries known to the compiler?
A021:The keyword is import external.package.structure.external.class;.
Q022:In some cases, significantly more than one class from an external library is used. However, specifying them individually is time-consuming. How can whole packages be “imported”?
A022:Whole packages can be imported by using the “*” character (for example: import org.apache.log4j.*;).
Q023:What is the Java class library?
A023:The Java class library is one of the most important libraries in Java. It supports the programmer with useful functions for the most different problems.
Q024:How does the inclusion of the Java class library differ from other external libraries?
A024:The Java class library is already integrated in the Java runtime environment and therefore, in contrast to externally developed libraries, does not have to be manually added to the classpath.
Q025:List a few application areas that can be supported by special packages in the Java class library.
A025:GUI programming, writing to and reading from files, accessing databases, using frequently used data structures.
Q026:What problem arises when you want to integrate external libraries? How is this problem solved?
A026:For externally developed libraries only the externally offered behavior is known (public method signatures of the classes). The internal structure, and how the functionality is implemented, is unknown. Since the method names are not necessarily self-explanatory, the programmer needs information about the purpose and use of the methods. This is ensured by API documentation and, if necessary, additional tutorials (also: programmer's guides).
Q027:What are arrays and how are they stored?
A027:Arrays are the most rudimentary way to store several objects with the same type in Java. The elements of an array are written to main memory sequentially one after the other.
Q028:How does one declare arrays in Java and what has to be considered?
A029:When declaring an array, the data type must be specified followed by an open and a closed square bracket and the identifier (“int[] vector;”).
Q030:How can array elements be initialized differently from the standard?
A030:Array elements can be initialized differently using a comma-separated list in curly brackets:
int[] vector = new int[] {2, 4, 1};.